pipeline {
  agent any
  environment {
    DOCKER_CREDENTIALS_ID = 'dockerHub123' // Docker credentials as environment variable
    Name='eliyaser'
    SERVICES_JSON = '{"redis":"4.0.9","nginx":"1.14.0"}'
  }
  stages {
    stage('Download sources') {
      steps {
         sh(
          script:'sudo git clone https: //github.com/sloopstash/kickstart-docker.git kickstart-docker',
          returnStatus:true
        )
      }
    }
    stage('Build and Push Images') {
      steps {
        script {
           // Manually parse the JSON string into a map
          def services = [:] // Create an empty map
          // Split the JSON string and populate the map
          SERVICES_JSON.replaceAll("[{}\"]", "").split(",").each { entry ->
            def (key, value) = entry.split(":").collect { it.trim() }
            services[key] = value // Add to map
          }
          services.each {
            service,
            version ->
            def imageName = "${env.Name}/${service}:v${version}"
            def dockerfilePath = "image/${service}/${version}/amazon-linux-2.dockerfile"
            def contextPath = "image/${service}/${version}/context"
            dir('kickstart-docker') {
              echo "Building Docker image: ${imageName}"
              def customImage = docker.build(imageName, "-f ${dockerfilePath} ${contextPath}")
              echo "Pushing Docker image: ${imageName} to Docker Hub"
              docker.withRegistry('', env.DOCKER_CREDENTIALS_ID) {
                customImage.push()
              }
            }
          }
        }
      }
    }
  }
  post {
    success {
      echo "All Docker images have been built and pushed to Docker Hub successfully!"
    }
    failure {
      echo "Failed to build or push one or more Docker images."
    }
    always {
      sh 'sudo docker logout'
    }
  }
}